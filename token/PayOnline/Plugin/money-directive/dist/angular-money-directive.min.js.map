{"version":3,"sources":["angular-money-directive.min.js"],"names":["NUMBER_REGEXP","DEFAULT_PRECISION","angular","module","directive","$parse","link","scope","el","attrs","ngModelCtrl","round","num","d","Math","pow","precision","formatPrecision","value","parseFloat","toFixed","isPrecisionValid","isNaN","updateValuePrecision","modelValue","$modelValue","ngModel","assign","$viewValue","$render","minValidator","$isEmpty","min","$setValidity","maxValidator","max","lastValidValue","$parsers","push","isUndefined","indexOf","empty","test","$observe","$formatters","isDefined","val","parseInt","undefined","bind","restrict","require"],"mappings":"CAAA,WACA,YAOA,IAAIA,GAAgB,qCAChBC,EAAoB,CAExBC,SAAQC,OAAO,oBAEdC,UAAU,SAAU,SAAU,SAAUC,GACvC,QAASC,GAAKC,EAAOC,EAAIC,EAAOC,GAQ9B,QAASC,GAAMC,GACb,GAAIC,GAAIC,KAAKC,IAAI,GAAIC,EACrB,OAAOF,MAAKH,MAAMC,EAAMC,GAAKA,EAQ/B,QAASI,GAAgBC,GACvB,MAAOC,YAAWD,GAAOE,QAAQJ,GAGnC,QAASK,KACP,OAAQC,MAAMN,IAAcA,EAAY,GAG1C,QAASO,KAEP,GAAIC,GAAad,EAAYe,aAExBH,MAAME,IAAeH,MACxBX,EAAYe,YAAcd,EAAMa,GAChCnB,EAAOI,EAAMiB,SAASC,OAAOpB,EAAOG,EAAYe,aAEhDf,EAAYkB,WAAaX,EAAgBO,GACzCd,EAAYmB,WAIhB,QAASC,GAAaZ,GACpB,OAAKR,EAAYqB,SAASb,IAAkBc,EAARd,MAClCR,GAAYuB,aAAa,OAAO,IAGhCvB,EAAYuB,aAAa,OAAO,GACzBf,GAIX,QAASgB,GAAahB,GACpB,OAAKR,EAAYqB,SAASb,IAAUA,EAAQiB,MAC1CzB,GAAYuB,aAAa,OAAO,IAGhCvB,EAAYuB,aAAa,OAAO,GACzBf,GAtDX,GAAIc,GAAKG,EAAKnB,EAAWoB,CA2DzB1B,GAAY2B,SAASC,KAAK,SAAUpB,GAC9BhB,QAAQqC,YAAYrB,KACtBA,EAAQ,IAIiB,IAAvBA,EAAMsB,QAAQ,OAChBtB,EAAQ,IAAMA,GAIW,IAAvBA,EAAMsB,QAAQ,OACZR,GAAO,GACTd,EAAQ,KACRR,EAAYkB,WAAa,GACzBlB,EAAYmB,WACO,MAAVX,IACTA,EAAQ,IAIZ,IAAIuB,GAAQ/B,EAAYqB,SAASb,EAajC,OAZIuB,IAASzC,EAAc0C,KAAKxB,GAC9BkB,EAA4B,KAAVlB,EACd,KACCuB,EAAQvB,EAAQC,WAAWD,IAGhCR,EAAYkB,WAAaQ,EACzB1B,EAAYmB,WAGdnB,EAAYuB,aAAa,UAAU,GAE5BG,IAKT3B,EAAMkC,SAAS,MAAO,SAAUzB,GAC9Bc,EAAMb,WAAWD,GAAS,GAC1BY,EAAapB,EAAYe,eAG3Bf,EAAY2B,SAASC,KAAKR,GAC1BpB,EAAYkC,YAAYN,KAAKR,GAIzB5B,QAAQ2C,UAAUpC,EAAM0B,OAC1B1B,EAAMkC,SAAS,MAAO,SAAUG,GAC9BX,EAAMhB,WAAW2B,GACjBZ,EAAaxB,EAAYe,eAG3Bf,EAAY2B,SAASC,KAAKJ,GAC1BxB,EAAYkC,YAAYN,KAAKJ,IAK3BhC,QAAQ2C,UAAUpC,EAAMO,WAC1BP,EAAMkC,SAAS,YAAa,SAAUzB,GACpCF,EAAY+B,SAAS7B,EAAO,IAE5BK,MAGFP,EAAYf,EAGdS,EAAY2B,SAASC,KAAK,SAAUpB,GAClC,MAAIA,GAEFkB,EAAiBf,IAAqBV,EAAMO,GAASA,EAG9C8B,SAIXtC,EAAYkC,YAAYN,KAAK,SAAUpB,GACrC,MAAIA,GACKG,IAAqBJ,EAAgBC,GAASA,EAE9C,KAKXV,EAAGyC,KAAK,OAAQ1B,GAGlB,OACE2B,SAAU,IACVC,QAAS,UACT7C,KAAMA","file":"angular-money-directive.min.js","sourcesContent":["(function () {\n'use strict';\n\n/**\n * Heavily adapted from the `type=\"number\"` directive in Angular's\n * /src/ng/directive/input.js\n */\n\nvar NUMBER_REGEXP = /^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d*)))\\s*$/;\nvar DEFAULT_PRECISION = 2;\n\nangular.module('fiestah.money', [])\n\n.directive('money', [\"$parse\", function ($parse) {\n  function link(scope, el, attrs, ngModelCtrl) {\n    var min, max, precision, lastValidValue;\n\n    /**\n     * Returns a rounded number in the precision setup by the directive\n     * @param  {Number} num Number to be rounded\n     * @return {Number}     Rounded number\n     */\n    function round(num) {\n      var d = Math.pow(10, precision);\n      return Math.round(num * d) / d;\n    }\n\n    /**\n     * Returns a string that represents the rounded number\n     * @param  {Number} value Number to be rounded\n     * @return {String}       The string representation\n     */\n    function formatPrecision(value) {\n      return parseFloat(value).toFixed(precision);\n    }\n\n    function isPrecisionValid() {\n      return !isNaN(precision) && precision > -1;\n    }\n\n    function updateValuePrecision() {\n      // $modelValue shows up as NaN in 1.2 on init\n      var modelValue = ngModelCtrl.$modelValue;\n\n      if (!isNaN(modelValue) && isPrecisionValid()) {\n        ngModelCtrl.$modelValue = round(modelValue);\n        $parse(attrs.ngModel).assign(scope, ngModelCtrl.$modelValue);\n\n        ngModelCtrl.$viewValue = formatPrecision(modelValue);\n        ngModelCtrl.$render();\n      }\n    }\n\n    function minValidator(value) {\n      if (!ngModelCtrl.$isEmpty(value) && value < min) {\n        ngModelCtrl.$setValidity('min', false);\n        return undefined;\n      } else {\n        ngModelCtrl.$setValidity('min', true);\n        return value;\n      }\n    }\n\n    function maxValidator(value) {\n      if (!ngModelCtrl.$isEmpty(value) && value > max) {\n        ngModelCtrl.$setValidity('max', false);\n        return undefined;\n      } else {\n        ngModelCtrl.$setValidity('max', true);\n        return value;\n      }\n    }\n\n\n    ngModelCtrl.$parsers.push(function (value) {\n      if (angular.isUndefined(value)) {\n        value = '';\n      }\n\n      // Handle leading decimal point, like \".5\"\n      if (value.indexOf('.') === 0) {\n        value = '0' + value;\n      }\n\n      // Allow \"-\" inputs only when min < 0\n      if (value.indexOf('-') === 0) {\n        if (min >= 0) {\n          value = null;\n          ngModelCtrl.$viewValue = '';\n          ngModelCtrl.$render();\n        } else if (value === '-') {\n          value = '';\n        }\n      }\n\n      var empty = ngModelCtrl.$isEmpty(value);\n      if (empty || NUMBER_REGEXP.test(value)) {\n        lastValidValue = (value === '')\n          ? null\n          : (empty ? value : parseFloat(value));\n      } else {\n        // Render the last valid input in the field\n        ngModelCtrl.$viewValue = lastValidValue;\n        ngModelCtrl.$render();\n      }\n\n      ngModelCtrl.$setValidity('number', true);\n\n      return lastValidValue;\n    });\n\n\n    // Min validation\n    attrs.$observe('min', function (value) {\n      min = parseFloat(value || 0);\n      minValidator(ngModelCtrl.$modelValue);\n    });\n\n    ngModelCtrl.$parsers.push(minValidator);\n    ngModelCtrl.$formatters.push(minValidator);\n\n\n    // Max validation (optional)\n    if (angular.isDefined(attrs.max)) {\n      attrs.$observe('max', function (val) {\n        max = parseFloat(val);\n        maxValidator(ngModelCtrl.$modelValue);\n      });\n\n      ngModelCtrl.$parsers.push(maxValidator);\n      ngModelCtrl.$formatters.push(maxValidator);\n    }\n\n\n    // Round off (disabled by \"-1\")\n    if (angular.isDefined(attrs.precision)) {\n      attrs.$observe('precision', function (value) {\n        precision = parseInt(value, 10);\n\n        updateValuePrecision();\n      });\n    } else {\n      precision = DEFAULT_PRECISION;\n    }\n\n    ngModelCtrl.$parsers.push(function (value) {\n      if (value) {\n        // Save with rounded value\n        lastValidValue = isPrecisionValid() ? round(value) : value;\n        return lastValidValue;\n      } else {\n        return undefined;\n      }\n    });\n\n    ngModelCtrl.$formatters.push(function (value) {\n      if (value) {\n        return isPrecisionValid() ? formatPrecision(value) : value;\n      } else {\n        return '';\n      }\n    });\n\n    // Auto-format precision on blur\n    el.bind('blur', updateValuePrecision);\n  }\n\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: link\n  };\n}]);\n\n})();\n"],"sourceRoot":"/source/"}